version: '3.8'

services:
  # Jules Orchestrator - Main coordination service
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    image: dasy/orchestrator:latest
    container_name: dasy_orchestrator
    env_file: .env
    environment:
      - NODE_ENV=production
      - PORT=${ORCHESTRATOR_PORT:-8000}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - rabbitmq
      - postgres
    ports:
      - "${ORCHESTRATOR_PORT:-8000}:8000"
    volumes:
      - ./orchestrator/config:/app/config
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Agents
  dev-agent:
    build:
      context: ./agents/dev
      dockerfile: Dockerfile
    image: dasy/agent-dev:latest
    container_name: dasy_dev_agent
    env_file: .env
    environment:
      - AGENT_TYPE=developer
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      - ORCHESTRATOR_URL=http://orchestrator:8000
    depends_on:
      - rabbitmq
      - orchestrator
    volumes:
      - ./workspace:/app/workspace
      - ./logs:/app/logs
    restart: unless-stopped

  reviewer-agent:
    build:
      context: ./agents/reviewer
      dockerfile: Dockerfile
    image: dasy/agent-reviewer:latest
    container_name: dasy_reviewer_agent
    env_file: .env
    environment:
      - AGENT_TYPE=reviewer
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      - ORCHESTRATOR_URL=http://orchestrator:8000
    depends_on:
      - rabbitmq
      - orchestrator
    volumes:
      - ./workspace:/app/workspace
      - ./logs:/app/logs
    restart: unless-stopped

  architect-agent:
    build:
      context: ./agents/architect
      dockerfile: Dockerfile
    image: dasy/agent-architect:latest
    container_name: dasy_architect_agent
    env_file: .env
    environment:
      - AGENT_TYPE=architect
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      - ORCHESTRATOR_URL=http://orchestrator:8000
    depends_on:
      - rabbitmq
      - orchestrator
    volumes:
      - ./workspace:/app/workspace
      - ./logs:/app/logs
    restart: unless-stopped

  devops-agent:
    build:
      context: ./agents/devops
      dockerfile: Dockerfile
    image: dasy/agent-devops:latest
    container_name: dasy_devops_agent
    env_file: .env
    environment:
      - AGENT_TYPE=devops
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      - ORCHESTRATOR_URL=http://orchestrator:8000
    depends_on:
      - rabbitmq
      - orchestrator
    volumes:
      - ./workspace:/app/workspace
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker operations
    restart: unless-stopped

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: dasy_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - dasy_rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database
  postgres:
    image: postgres:15
    container_name: dasy_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - dasy_pgdata:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cloudflare Tunnel (optional, enabled when CLOUDFLARE_TUNNEL_TOKEN is set)
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: dasy_cloudflared
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    command: tunnel run
    depends_on:
      - orchestrator
    restart: unless-stopped
    profiles:
      - cloudflare
    # Only start if CLOUDFLARE_TUNNEL_TOKEN is provided

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: dasy_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-dasy_redis_pass}
    ports:
      - "6379:6379"
    volumes:
      - dasy_redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard (optional)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    image: dasy/dashboard:latest
    container_name: dasy_dashboard
    environment:
      - REACT_APP_API_URL=http://localhost:${ORCHESTRATOR_PORT:-8000}
      - REACT_APP_RABBITMQ_URL=http://localhost:15672
    ports:
      - "3000:3000"
    depends_on:
      - orchestrator
    restart: unless-stopped

volumes:
  dasy_pgdata:
    driver: local
  dasy_rabbitmq_data:
    driver: local
  dasy_redis_data:
    driver: local

networks:
  default:
    name: dasy_network
    driver: bridge